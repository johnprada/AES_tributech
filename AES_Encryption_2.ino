#include "AES.h"
#include "base64.h"

AES aes;
byte ivkey[] = { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C };
byte Mykey[] = { 0X8B,0X00,0XE6,0X42,0XC2,0XDE,0X9D,0X72,0X14,0X0F,0X70,0X96,0X46,0XFF,0X28,0X0D,0XBE,0X54,0XA9,0XD7,0XC8,0XFD,0XBF,0XA4,0XA4,0XBA,0X33,0X52,0X7F,0X5C,0XB7,0X34,0XC5,0X53,0X85,0X0F,0X5D,0X1A,0X56,0XBD,0XAA,0X4E,0XCA,0X23,0X82,0X2D,0XE7,0X01,0X2B,0X93,0X98,0X7C,0X70,0X4C,0X71,0XBD,0XFF,0XF1,0X18,0X37,0X44,0XF4,0X5B,0X09,0X2A,0X37,0X08,0XED,0XEC,0X4E,0X79,0X38,0X54,0X2A,0XAB,0X4A,0X1E,0X2E,0X14,0X9B,0XF2,0X7C,0X1D,0XE2,0X74,0X9C,0X57,0X20,0X1B,0X36,0X53,0XB9,0X13,0X0C,0X63,0XCD,0XC1,0XE1,0X95,0X53,0X65,0X93,0X6A,0X49,0X42,0X64,0X67,0X18,0XE6,0X2B,0X58,0XF2,0XBA,0X25,0X99,0XAD,0X65,0XFE,0XEC,0X01,0X51,0X7E,0XFB,0XE4,0X32,0X8B,0XB9,0X49,0XBA,0X4C,0XF0,0X8F,0XB4,0X24,0X0F,0X9C,0XD3,0X56,0X88,0XEB,0X5A,0XA1,0X80,0X7D,0XB5,0XAE,0XF6,0XA2,0X39,0XDF,0X8D,0XD9,0X49,0X02,0X1B,0X51,0X48,0XDA,0X9E,0X0F,0X62,0XAD,0X09,0XA1,0X3B,0X37,0X99,0XD7,0XDC,0XD6,0X11,0XC0,0X4B,0X2D,0X11,0X13,0X6A,0X6C,0X8A,0X69,0X2F,0XC7,0XEF,0XDA,0X26,0X45,0XA4,0XD4,0XC4,0X4D,0X58,0X46,0XC9,0XA2,0XE3,0XCF,0X02,0XC8,0X5C,0XBA,0X58,0XCC,0X0C,0X18,0X83,0X41,0XDC,0XA6,0XFB,0XD2,0X9E,0X00,0XBA,0X6E,0X59,0XF4,0XE7,0X9C,0XA9,0X81,0X8F,0XFD,0X9C,0XF1,0X1F,0X07,0X8B,0XC2,0X59,0XCD,0X69,0XBC,0XBF,0XA4,0X85,0X43,0XCD,0X2F,0X70,0X45,0X2D,0X16,0X4E,0X8E,0XB9,0X36,0X4E,0XB4,0XE2,0X83,0XC4,0X53,0XB5,0X2A,0XF6,0XDA,0X97,0XD1,0X05,0X31,0XC7,0X1D,0X49,0XC1,0X57,0X58,0X14,0XAA,0XFF,0X9B,0X6A,0XE5,0XB2,0XFC,0XEE,0X7A,0XE7,0X05,0XE6,0X88,0X0A,0X26,0X1E,0XAF,0XE7,0X92,0X4A,0X07,0X55,0X14,0XDB,0X49,0X93,0X66,0X81,0XA2,0X04,0XFB,0X8E,0X9E,0X53,0X60,0XEF,0X9E,0X7B,0X0D,0X20,0XC8,0X2D,0X8F,0X54,0X77,0X8E,0XD4,0X69,0X95,0X93,0X2F,0XA8,0XCE,0XE9,0XAE,0XFB,0X77,0X7E,0XA7,0XAE,0X94,0X46,0XE8,0X7A,0X1E,0X18,0X2B,0XB7,0X87,0XBD,0X5D,0X46,0XF9,0XF1,0X2E,0X5F,0X35,0X66,0XCD,0X2C,0X52,0XB7,0XB2,0XFC,0X6A,0X55,0X8D,0X4C,0XFC,0XF7,0X07,0X2A,0X71,0X89,0XAF,0X80,0X61,0X49,0X20,0X47,0XEB,0XC1,0X2B,0XDB,0XC4,0X35,0X0F,0X5B,0XBD,0X09,0X55,0X63,0X9D,0XC7,0X05,0X7E,0XB6,0XF8,0X5E,0X3B,0X6D,0XE9,0X0E,0X09,0X23,0X18,0XAE,0X4E,0XF8,0XEF,0XDE,0XE0,0X9B,0X9C,0X75,0X3F,0XC0,0XDA,0X5C,0X91,0X7F,0X66,0X77,0X72,0X77,0X1E,0X63,0XAE,0X2F,0X01,0X9B,0X31,0X27,0XEE,0XEF,0XA4,0X9E,0XB7,0X57,0X43,0X53,0XE8,0X56,0X0C,0X60,0X7B,0XFA,0XCB,0X93,0X2C,0XC3,0XB3,0XD8,0XCC,0X15,0XDE,0X74,0X48,0XF8,0X9D,0XF6,0X80,0X01,0XF6,0XF7,0XFC,0X03,0X4D,0X7B,0X73,0X30,0X00,0X51,0XC5,0X0B,0X87,0X28,0XA5,0XDE,0X5E,0X42,0X43,0XBF,0X04,0X81,0X14,0X1F,0XD3,0X34,0X67,0X98,0X60,0X8E,0X8A,0XB4,0XF6,0X10,0X0C,0XDE,0X50,0X07,0X85,0X1C,0X72,0X6A,0XFA,0X25,0X03,0X18,0XB5,0X74,0XE3,0X18,0X54,0X9F,0X48,0X5C,0XC7,0XD1,0XE1,0X18,0XB2,0XED,0X05,0XD9,0XE2,0X33,0XD0,0XD9,0XF7,0X72,0XDB,0X74,0XA1,0X70,0X03,0X92,0X75,0X00,0X71,0X79,0XF7,0X3D,0X40,0XF4,0X52,0XBE,0XDF,0X24,0X80,0X09,0XCB,0XEB,0X4C,0X69,0XA2,0X57,0X48,0XB0,0X8B,0XA2,0XDF,0XDD,0X14,0X28,0XA7,0XE5,0X73,0X2E,0X73,0X61,0XC4,0XA5,0X5B,0XC2,0XF6,0X9F,0X52,0XEA,0X72,0X3E,0X90,0X31,0X84,0X2B,0XB2,0X74,0XB7,0X96,0X45,0X19,0X85,0XA1,0XE4,0XAE,0X47,0X97,0XE2,0XA2,0XFE,0XF5,0X57,0X3D,0XFE,0XE5,0X42,0XEE,0X09,0X0E,0XCA,0X0E,0XF3,0X99,0X90,0X04,0X1A,0X34,0X7E,0XCB,0XBE,0X1F,0XD9,0XDD,0X3B,0X05,0XD7,0X0F,0X45,0X09,0XD5,0XA2,0XBA,0XF5,0XC0,0X93,0X4E,0X1D,0X45,0X49,0XAC,0X74,0X85,0XB9,0XA8,0XD4,0X5E,0X78,0X50,0X40,0X2C,0X5E,0X64,0XF6,0XE5,0X06,0XC0,0X0C,0X9D,0X4C,0XBF,0XD3,0X69,0XEE,0XDE,0XF7,0XE0,0X25,0X77,0X62,0XED,0X33,0X18,0XAC,0X71,0X03,0X9F,0XF6,0XAE,0X7F,0XC8,0X2C,0X98,0X89,0XBF,0X37,0X2E,0X4D,0X79,0X76,0XFA,0X12,0X9F,0X59,0XFD,0X28,0X6A,0X60,0XED,0XF1,0X54,0XAD,0X6C,0XDA,0XD6,0XD7,0XE9,0X24,0XE8,0X7E,0X9F,0X6D,0X7B,0XA7,0X2B,0XF1,0X07,0X80,0XE3,0X77,0X04,0X7F,0XB4,0X0F,0X6C,0X29,0X77,0XEB,0X57,0XBC,0X23,0XA0,0XD3,0X36,0X30,0X56,0X23,0X1C,0X06,0XB5,0X3B,0X36,0X9F,0X9E,0X55,0XD4,0X7B,0X9F,0XAF,0X39,0XD4,0XCA,0X0A,0XF8,0X15,0X94,0X11,0X6C,0X38,0X80,0X07,0XE9,0XB0,0X9F,0X4E,0X93,0X25,0X69,0X5B,0XB5,0X66,0X4C,0XED,0X66,0XC0,0X4A,0XC2,0XE5,0X1D,0XE6,0X3F,0X16,0XAC,0X68,0XD5,0X16,0XF5,0X8A,0X14,0XB0,0XC9,0X8D,0X96,0X43,0X68,0X22,0X3D,0X7D,0X49,0X86,0XF7,0XC2,0X31,0XCF,0X5D,0XBC,0X69,0XF9,0XC0,0XC8,0X53,0X21,0X07,0X9C,0XF9,0XA8,0X35,0XDD,0XD1,0XD3,0X54,0XF7,0XB5,0XDC,0XAF,0XD5,0X2D,0X53,0XD7,0XD7,0X16,0X73,0X08,0X0B,0X77,0X5D,0XA2,0XC0,0X50,0XD1,0X81,0X0A,0X4C,0X99,0X8E,0X2F,0XCE,0X9B,0X24,0XA7,0X18,0X35,0XBF,0X47,0X22,0X23,0X63,0X59,0X36,0X88,0XDA,0X9E,0XA8,0X5A,0XEF,0X8A,0X61,0X64,0X72,0X54,0XB1,0XE4,0X79,0X8E,0X94,0X06,0X78,0XC3,0X86,0X81,0X72,0XB1,0X7B,0XF1,0XB7,0X7C,0X3C,0XAD,0X8B,0XEA,0X7B,0XDB,0XFB,0XFC,0XCF,0X8A,0X5A,0XE8,0X7C,0XA0,0X8B,0X36,0X6F,0XF7,0X6E,0X78,0X9C,0X35,0X65,0X53,0XCD,0XFF,0X78,0X86,0X69,0XC1,0XED,0XD4,0XDB,0X06,0XB2,0XD0,0X11,0X24,0X52,0X41,0X2E,0XAF,0X04,0X15,0XE9,0XA0,0XDF,0X56,0X93,0X97,0XBF,0X0B,0X0E,0XC0,0X2F,0X32,0X2E,0XF1,0XCD,0X2A,0XF0,0X54,0X78,0XF7,0X4F,0X8C,0XEE,0XE9,0XA0,0X69,0XF6,0X77,0XFB,0X4E,0X5C,0X44,0X80,0X2A,0X84,0XDE,0XA5,0XF1,0XAC,0X57,0X61,0X2D,0X3A,0X42,0X97,0X2E,0X39,0X9A,0X1D,0X4F,0X60,0XA8,0XAE,0X98,0X01,0X54,0X8D,0X62,0X44,0X25,0XEF,0XDD,0X83,0X35,0X56,0XAF,0X7A,0X43,0X05,0X51,0XDB,0XC5,0XA9,0X44,0X83,0X36,0X19,0X71,0X2F,0X8F,0XC9,0X8E,0X63,0X2C };


// Generate a random initialization vector
void gen_iv(byte  *iv) {
    for (int i = 0 ; i < N_BLOCK ; i++ ) {
        iv[i]= ivkey[i];
        
    }
}

void gen_key(byte  *TheKey, int index) {
    for (int i = 0 ; i < N_BLOCK ; i++ ) {
        TheKey[i]= Mykey[index+i];
    }
}
    
    
void setup() {
    Serial.begin(9600);
    Serial.println("\nBooting...");  

  char b64data[200];
    byte cipher[1000];
    byte iv [N_BLOCK] ;
   
    
    
    Serial.println("Let's encrypt:");
    // Our AES key. Note that is the same that is used on the Node-Js side but as hex bytes.
    
    // The unitialized Initialization vector
    byte my_iv[N_BLOCK] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    byte key[N_BLOCK] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    // Our message to encrypt. Static for this example.
    String msg = "-72.057983";
    gen_key(key,10);
    aes.set_key( key , sizeof(key));  // Get the globally defined key
    gen_iv( my_iv );                  // Generate a random IV
    
    // Print the IV
    base64_encode( b64data, (char *)key, N_BLOCK);
    Serial.println(" key b64: " + String(b64data));

    base64_encode( b64data, (char *)my_iv, N_BLOCK);
    Serial.println(" IV b64: " + String(b64data));

    Serial.println(" Message: " + msg );
 
    int b64len = base64_encode(b64data, (char *)msg.c_str(),msg.length());
    Serial.println (" Message in B64: " + String(b64data) );
    Serial.println (" The lenght is:  " + String(b64len) );
    
    // For sanity check purpose
    //base64_decode( decoded , b64data , b64len );
    //Serial.println("Decoded: " + String(decoded));
    
    // Encrypt! With AES128, our key and IV, CBC and pkcs7 padding    
    aes.do_aes_encrypt((byte *)b64data, b64len , cipher, key, 128, my_iv);
    
    Serial.println("Encryption done!");
    
    Serial.println("Cipher size: " + String(aes.get_size()));
    
    base64_encode(b64data, (char *)cipher, aes.get_size() );
    String MyString2Send = String(b64data);
    MyString2Send.replace("=", "\0");
//    int mylength = MyString2Send.length();    
//    MyString2Send[mylength-1] = '\0';

    Serial.println ("Encrypted data in base64: " + String(b64data) );
    Serial.println ("My string 2 send " + MyString2Send );

    Serial.println("Done...");
}

void loop() {
  // put your main code here, to run repeatedly:
   

}
